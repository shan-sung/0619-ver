package com.example.myapplication.ui.components.placedetaildialog.comp

import android.util.Log
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccessTime
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material.icons.filled.KeyboardArrowUp
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import java.time.LocalDate
import java.time.LocalTime
import java.time.format.DateTimeFormatter
import java.util.Locale

@Composable
fun OpeningHoursSection(
    hours: List<String>,
    modifier: Modifier = Modifier
) {
    var expanded by remember { mutableStateOf(false) }

    val now = remember { LocalTime.now() }
    val today = remember { LocalDate.now().dayOfWeek.name } // e.g., MONDAY

    fun String.toChineseDay(): String = when (this.uppercase()) {
        "MONDAY" -> "ÊòüÊúü‰∏Ä"
        "TUESDAY" -> "ÊòüÊúü‰∫å"
        "WEDNESDAY" -> "ÊòüÊúü‰∏â"
        "THURSDAY" -> "ÊòüÊúüÂõõ"
        "FRIDAY" -> "ÊòüÊúü‰∫î"
        "SATURDAY" -> "ÊòüÊúüÂÖ≠"
        "SUNDAY" -> "ÊòüÊúüÊó•"
        else -> this
    }


    // Êì∑Âèñ‰ªäÂ§©ÁáüÊ•≠ÊôÇÈñìÔºà‰æãÂ¶ÇÔºöMONDAY: 10 AM‚Äì5 PMÔºâ
    val todayHours = hours.find { it.uppercase().startsWith(today) }
    val timeRange = todayHours
        ?.split(":", limit = 2)
        ?.getOrNull(1)
        ?.let { normalizeTimeRange(it) }

    val statusInfo = runCatching {
        // ÈÄôË£°ÊòØÂéüÊú¨ try Ë£°ÁöÑÈÇèËºØ
        if (timeRange.isNullOrBlank()) {
            "‰ªäÊó•ÁáüÊ•≠Ë≥áË®äÁº∫Êºè" to MaterialTheme.colorScheme.onSurfaceVariant
        } else if (timeRange.equals("Closed", ignoreCase = true)) {
            "Â∑≤ÊâìÁÉä" to MaterialTheme.colorScheme.primary
        } else if (timeRange.equals("24 Hours", ignoreCase = true)) {
            "24 Â∞èÊôÇÁáüÊ•≠" to MaterialTheme.colorScheme.primary
        } else {
            val parts = timeRange.split("-").map { it.trim() }
            if (parts.size != 2) throw IllegalArgumentException("Ê†ºÂºèÈåØË™§")
            val openTime = parseTimeStringFlexible(parts[0])
            val closeTime = parseTimeStringFlexible(parts[1])
            if (openTime == null || closeTime == null) throw IllegalArgumentException("ÊôÇÈñìËß£ÊûêÂ§±Êïó")

            val formatter = DateTimeFormatter.ofPattern("a h:mm", Locale.CHINESE)
            if (now.isAfter(openTime) && now.isBefore(closeTime)) {
                val closeDisplay = closeTime.format(formatter)
                    .replace("AM", "‰∏äÂçà").replace("PM", "‰∏ãÂçà")
                "ÁáüÊ•≠‰∏≠ ¬∑ Ëá≥ $closeDisplay" to MaterialTheme.colorScheme.primary
            } else {
                val openDisplay = openTime.format(formatter)
                    .replace("AM", "‰∏äÂçà").replace("PM", "‰∏ãÂçà")
                "Â∞öÊú™ÁáüÊ•≠ ¬∑ $openDisplay ÈñãÂßã" to MaterialTheme.colorScheme.primary
            }
        }
    }.getOrElse {
        Log.e("OpeningHours", "ÁáüÊ•≠ÊôÇÈñìËß£ÊûêÂ§±ÊïóÔºö${it.message}")
        "ÁáüÊ•≠Ë≥áË®äÈåØË™§" to MaterialTheme.colorScheme.onSurfaceVariant
    }

    val (statusText, statusColor) = remember(statusInfo) { statusInfo }

    Column(modifier = modifier) {
        // ‚è∞ ÁáüÊ•≠ÁãÄÊÖã
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier
                .fillMaxWidth()
                .clickable { expanded = !expanded }
                .padding(vertical = 8.dp)
        ) {
            Icon(
                imageVector = Icons.Default.AccessTime,
                contentDescription = null,
                tint = Color(0xFF007B8F),
                modifier = Modifier.size(20.dp)
            )
            Spacer(Modifier.width(8.dp))
            Text(
                text = statusText,
                color = statusColor,
                style = MaterialTheme.typography.labelLarge
            )
            Spacer(modifier = Modifier.weight(1f))
            Icon(
                imageVector = if (expanded) Icons.Default.KeyboardArrowUp else Icons.Default.KeyboardArrowDown,
                contentDescription = null,
                tint = Color.Gray
            )
        }

        // üìÖ ÊØèÊó•ÁáüÊ•≠ÊôÇÈñìË°®
        if (expanded) {
            Spacer(Modifier.height(4.dp))
            Column {
                hours.forEach { hour ->
                    val (dayEn, time) = try {
                        val parts = hour.split(":", limit = 2).map { it.trim() }
                        if (parts.size != 2) throw IllegalArgumentException("Ê†ºÂºèÈåØË™§")
                        parts[0] to parts[1]
                    } catch (e: Exception) {
                        "Ê†ºÂºèÈåØË™§" to hour
                    }

                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 2.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(
                            text = dayEn.toChineseDay(),
                            style = MaterialTheme.typography.bodyMedium
                        )
                        Text(
                            text = time,
                            style = MaterialTheme.typography.bodyMedium
                        )
                    }
                }
            }
        }
    }
}

fun normalizeTimeRange(raw: String): String {
    return raw
        .replace("‚Äì", "-")
        .replace("‚Äî", "-")
        .replace(Regex("[\u2000-\u206F\u2E00-\u2E7F\\s]+"), " ") // ÁßªÈô§ÁâπÊÆäÁ©∫ÁôΩÁ¨¶
        .replace(Regex("\\s*-\\s*"), "-") // Ê®ôÊ∫ñÂåñ dash
        .trim()
}

fun parseTimeStringFlexible(input: String): LocalTime? {
    val formats = listOf("h:mm a", "h a", "hh:mm a", "hh a")
    for (pattern in formats) {
        try {
            val formatter = DateTimeFormatter.ofPattern(pattern, Locale.ENGLISH)
            return LocalTime.parse(input.uppercase(Locale.ENGLISH), formatter)
        } catch (_: Exception) {
        }
    }
    return null
}
